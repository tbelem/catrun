/* -- DESCOMENTAR ESTE BLOCO SE AS TABELAS JA EXISTIREM

DROP TABLE MATCH;
DROP TABLE OBSTACLE;
DROP TABLE PLAYER_MISSION;
DROP TABLE MISSION;
DROP TABLE CATEG_MISSION;
DROP TABLE PLAYER_ACHIEVEMENT;
DROP TABLE ACHIEVEMENT;
DROP TABLE CATEG_ACHIEVEMENT;
DROP TABLE POWERUP;
DROP TABLE PLAYER_ITEM;
DROP TABLE ITEM;
DROP TABLE PLAYER_CURRENCY;
DROP TABLE PLAYER;

*/

CREATE TABLE PLAYER(
player_cod      INTEGER IDENTITY,     -- CODIGO DO JOGADOR
player_lgn      VARCHAR(20) NOT NULL, -- LOGIN DO JOGADOR
player_psw      VARCHAR(20) NOT NULL, -- PASSWORD DO JOGADOR
player_dat_ics  DATE,                 -- DATA DE CADASTRO DO JOGADOR
player_emi      VARCHAR(100),         -- EMAIL DO JOGADOR
player_scr_qst  VARCHAR(50),          -- PERGUNTA SECRETA
player_scr_asw  VARCHAR(50),          -- RESPOSTA SECRETA

CONSTRAINT PK_PLAYER PRIMARY KEY (player_cod)
);

CREATE TABLE PLAYER_CURRENCY(
pc_player_cod  INTEGER NOT NULL, -- CODIGO DO JOGADOR
pc_hgh_sco     INTEGER,          -- HIGH SCORE
pc_cur_mny     INTEGER,          -- DINHEIRO ATUAL
pc_tot_mny     INTEGER,          -- DINHEIRO TOTAL (SEMPRE)
pc_tot_sco     INTEGER,          -- SCORE TOTAL (SEMPRE)
pc_tot_obs     INTEGER,          -- OBSTACULOS TOTAL (SEMPRE)
pc_tot_pup     INTEGER,          -- POWERUPS TOTAL (SEMPRE)
pc_tot_mtc     INTEGER,          -- PARTIDAS TOTAL (SEMPRE)
pc_tot_mss	   INTEGER,          -- MISSOES TOTAL (SEMPRE)

CONSTRAINT PK_PC        PRIMARY KEY (pc_player_cod),
CONSTRAINT FK_PC_PLAYER FOREIGN KEY (pc_player_cod) REFERENCES PLAYER(player_cod)
);

CREATE TABLE ITEM(
 item_cod  INTEGER IDENTITY, -- CODIGO DO ITEM
 item_des  VARCHAR(30),      -- DESCRICAO DO ITEM
 item_pfb  VARCHAR(10),      -- PREFAB DO ITEM
 item_vlr  INTEGER,          -- VALOR DO ITEM
 item_ctg  INTEGER,          -- CATEGORIA DO ITEM

 CONSTRAINT PK_ITEM PRIMARY KEY (item_cod)
);

CREATE TABLE PLAYER_ITEM(
pi_player_cod  INTEGER NOT NULL, -- CODIGO DO PLAYER
pi_item_cod    INTEGER NOT NULL, -- CODIGO DO ITEM
pi_flg_atv	   INTEGER,          -- FLAG ATIVO (0-INATIVO 1-ATIVO)

CONSTRAINT PK_PLAYER_ITEM PRIMARY KEY (pi_player_cod,pi_item_cod),
CONSTRAINT FK_PI_PLAYER   FOREIGN KEY (pi_player_cod) REFERENCES PLAYER(player_cod),
CONSTRAINT FK_PI_ITEM     FOREIGN KEY (pi_item_cod) REFERENCES ITEM(item_cod)
);

CREATE TABLE POWERUP(
 powerup_cod  INTEGER IDENTITY, -- CODIGO DO POWERUP
 powerup_des  VARCHAR(30),      -- DESCRICAO DO POWERUP
 powerup_pfb  VARCHAR(10),      -- PREFAB DO POWERUP

 CONSTRAINT PK_POWERUP PRIMARY KEY (powerup_cod)
);

CREATE TABLE CATEG_ACHIEVEMENT(
ca_cod  INTEGER IDENTITY, -- CODIGO DA CATEGORIA DE CONQUISTA
ca_atb  VARCHAR(10),      -- ATRIBUTO CONSIDERADO PARA CONQUISTAS DESSA CATEGORIA

CONSTRAINT PK_CA PRIMARY KEY (ca_cod)
);

CREATE TABLE ACHIEVEMENT(
achievement_cod     INTEGER IDENTITY, -- CODIGO DA CONQUISTA
achievement_nom     VARCHAR(20),      -- NOME DA CONQUISTA
achievement_des     VARCHAR(300),     -- DESCRICAO DA CONQUISTA
achievement_pfb_1   VARCHAR(10),      -- PREFAB DA CONQUISTA INGAME
achievement_pfb_2   VARCHAR(10),      -- PREFAB DA CONQUISTA MENU
achievement_qtd     INTEGER,          -- QUANTIDADE META DO ATRIBUTO
achievement_ca_cod  INTEGER,          -- CATEGORIA DA CONQUISTA

CONSTRAINT PK_ACHIEVEMENT    PRIMARY KEY (achievement_cod),
CONSTRAINT FK_ACHIEVEMENT_CA FOREIGN KEY (achievement_ca_cod) REFERENCES CATEG_ACHIEVEMENT(ca_cod)
);

CREATE TABLE PLAYER_ACHIEVEMENT(
pa_player_cod       INTEGER NOT NULL, -- CODIGO DO JOGADOR
pa_achievement_cod  INTEGER NOT NULL, -- CODIGO DA CONQUISTA
pa_dat_ics          DATE,             -- DATA DE INCLUSAO (DATA EM QUE O JOGADOR COMPLETOU A CONQUISTA)

CONSTRAINT PK_PLAYER_ACHIEVEMENT PRIMARY KEY (pa_player_cod,pa_achievement_cod),
CONSTRAINT FK_PQ_PLAYER          FOREIGN KEY (pa_player_cod) REFERENCES PLAYER(player_cod),
CONSTRAINT FK_PQ_ACHIEVEMENT     FOREIGN KEY (pa_achievement_cod) REFERENCES ACHIEVEMENT(achievement_cod)
);

CREATE TABLE CATEG_MISSION(
cm_cod  INTEGER IDENTITY, -- CODIGO DA CATEGORIA DE MISSAO
cm_atb  VARCHAR(10),      -- ATRIBUTO CONSIDERADO PARA MISSOES DESSA CATEGORIA

CONSTRAINT PK_CM PRIMARY KEY (cm_cod)
);

CREATE TABLE MISSION(
mission_cod     INTEGER IDENTITY, -- CODIGO DA MISSAO
mission_nom     VARCHAR(20),      -- NOME DA MISSAO
mission_des     VARCHAR(300),     -- DESCRICAO DA MISSAO
mission_pfb     VARCHAR(10),      -- PREFAB DA MISSAO
mission_qtd     INTEGER,          -- QUANTIDADE META DO ATRIBUTO
mission_cm_cod  INTEGER,          -- CATEGORIA DA MISSAO

CONSTRAINT PK_MISSION    PRIMARY KEY (mission_cod),
CONSTRAINT FK_MISSION_CM FOREIGN KEY (mission_cm_cod) REFERENCES CATEG_MISSION(cm_cod)
);

CREATE TABLE PLAYER_MISSION(
pm_player_cod   INTEGER NOT NULL, -- CODIGO DO JOGADOR
pm_mission_cod  INTEGER NOT NULL, -- CODIGO DA MISSAO
pm_dat_ics      DATE,             -- DATA DE INCLUSAO (DATA QUE O JOGADOR INICIOU A MISSAO)
pm_dat_fim      DATE,             -- DATA DE CONCLUSAO (DATA QUE O JOGADOR CUMPRIU A MISSAO)

CONSTRAINT PK_PLAYER_MISSION PRIMARY KEY (pm_player_cod,pm_mission_cod),
CONSTRAINT FK_PM_PLAYER      FOREIGN KEY (pm_player_cod) REFERENCES PLAYER(player_cod),
CONSTRAINT FK_PM_MISSION     FOREIGN KEY (pm_mission_cod) REFERENCES MISSION(mission_cod)
);

CREATE TABLE OBSTACLE(
  obstacle_cod     INTEGER IDENTITY, -- CODIGO DO OBSTACULO
  obstacle_des     VARCHAR(30),      -- DESCRICAO DO OBSTACULO
  obstacle_prefab  VARCHAR(10),      -- PREFAB DO OBSTACULO

  CONSTRAINT PK_OBSTACLE PRIMARY KEY (obstacle_cod)
);

CREATE TABLE MATCH(
  match_cod         INTEGER IDENTITY, -- CODIGO DA PARTIDA
  match_player_cod  INTEGER NOT NULL, -- PLAYER DA PARTIDA
  match_dat_ics     DATE,             -- DATA INCLUSAO (DATA DA PARTIDA)
  match_sco         INTEGER,          -- SCORE FEITO NA PARTIDA
  match_mny         INTEGER,          -- DINHEIRO OBTIDO NA PARTIDA
  match_obs         INTEGER,          -- OBSTACULOS PASSADOS NA PARTIDA
  match_pup         INTEGER,          -- POWERUPS UTILIZADOS NA PARTIDA
  
  CONSTRAINT PK_MATCH        PRIMARY KEY (match_cod),
  CONSTRAINT FK_MATCH_PLAYER FOREIGN KEY (match_player_cod) REFERENCES PLAYER(player_cod)
);